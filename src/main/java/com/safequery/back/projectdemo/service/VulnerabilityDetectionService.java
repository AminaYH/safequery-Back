package com.safequery.back.projectdemo.service;

import com.safequery.back.projectdemo.contoller.NodeFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


@Service
public class VulnerabilityDetectionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NodeFile.class);


    public VulnerabilityResult checkForSQLInjection(String code) {
        // Look for pattern that indicates SQL injection like concatenation
        Pattern sqlConcatenationPattern = Pattern.compile("(?i)\\b(SELECT|FROM)\\b\\s*\\p{Punct}.*");
       // Pattern sqlInjectionPattern = Pattern.compile("(?i)\\b(SELECT|INSERT|UPDATE|DELETE|DROP)\\b");

        // Create matcher
        Matcher matcher1 = sqlConcatenationPattern.matcher(code);

        if (matcher1.find()) {
            int start = matcher1.start();
            int end = matcher1.end();

            String matchedPart = code.substring(start, end);

            return new VulnerabilityResult(true, "Potentially harmful Boolean-based SQL injection detected:" + matchedPart);
        } else {
            return new VulnerabilityResult(false, "No Boolean-based  SQL Injection vulnerability found.");
        }


    }


    public VulnerabilityResult CheckForVulnerabilityUnion(String code){
        Pattern sqlInjectionPattern = Pattern.compile("(?i)\\b(UNION|SELECT|FROM)\\b\\s*.*");



        Matcher matcher=sqlInjectionPattern.matcher(code);

        if (matcher.find()){
            int start = matcher.start();
            int end = matcher.end();

            String matchedPart = code.substring(start, end);
            return  new VulnerabilityResult(true, "Potentially harmful Union-based SQL injection detected: " + matchedPart);
        } else {
            return new VulnerabilityResult(false, "SQL query is safe from Union-based SQL injection:");
        }
    }

    public static class VulnerabilityResult {
        private final boolean detected;
        private final String message;

        public VulnerabilityResult(boolean detected, String message) {
            this.detected = detected;
            this.message = message;
        }

        public boolean isDetected() {
            return detected;
        }

        public String getMessage() {
            return message;
        }
    }



}
